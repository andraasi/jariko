//-----------------
//Examples build script
//-----------------
buildscript {
    ext.kotlinVersion = "${kotlinVersion}"

    repositories {
        mavenCentral()
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

dependencies {
    implementation project(":rpgJavaInterpreter-core")
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion".toString()
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion".toString()
    testCompile 'junit:junit:4.12'
}

// specifying what we want to sign
signing {
    sign configurations.archives
}

// deploy
publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'io.github.smeup.jariko'
            artifactId 'examples'
            version 'develop-SNAPSHOT'

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
}

// auto release nexus
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'A JAva virtual machine Rpg Interpreter written in KOtlin'
            name 'Jairko'
            url 'https://github.com/smeup/jariko'
            organization {
                name 'com.github.smeup'
                url 'https://github.com/smeup'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/smeup/jariko/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/smeup/jariko/blob/master/LICENSE.md'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/smeup/jariko'
                connection 'scm:git:git://github.com/smeup/jariko.git'
                developerConnection 'scm:git:ssh://git@github.com:smeup/jariko.git'
            }
            developers {
                developer {
                    name 'smeup'
                }
            }
        }
    }
}
