/*
 * Copyright 2019 Sme.UP S.p.A.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//-----------------
//Main build script
//-----------------

buildscript {

    repositories {
        mavenCentral()
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:8.2.0"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'org.jlleitschuh.gradle.ktlint'
    apply plugin: 'kotlinx-serialization'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.jfrog.org/oss-snapshot-local/' }
        jcenter()
    }

    // project.group and project.version are used to identify jariko maven coordinates
    // If you have a project depending on jariko and you want to test
    // some jariko feature without waiting for jitpack.io, you can type:
    // ./gradlew install
    // This task will install jariko artifacts into your local maven repository
    project.group = "io.github.smeup.jariko"
    project.version = "develop-SNAPSHOT"

    // specifying what we want to sign
    signing {
        sign configurations.archives
    }

    publishing {
        repositories {
            maven {
                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username findProperty(sonatypeUsername)
                    password findProperty(sonatypePassword)
                }
            }
        }
    }

    model {
        tasks.generatePomFileForMavenJavaPublication {
            destination = file("$buildDir/generated-pom.xml")
        }
        tasks.publishMavenJavaPublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        tasks.publishMavenJavaPublicationToMavenRepository {
            dependsOn project.tasks.signArchives
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'A JAva virtual machine Rpg Interpreter written in KOtlin'
            name 'Jairko'
            url 'https://github.com/smeup/jariko'
            organization {
                name 'com.github.smeup'
                url 'https://github.com/smeup'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/smeup/jariko/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/smeup/jariko/blob/master/LICENSE.md'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/smeup/jariko'
                connection 'scm:git:git://github.com/smeup/jariko.git'
                developerConnection 'scm:git:ssh://git@github.com:smeup/jariko.git'
            }
            developers {
                developer {
                    name 'smeup'
                }
            }
        }
    }
}


