//-----------------
//kolasu build script
//-----------------
buildscript {

    ext.antlr_version = '4.7.2'

    repositories {
        mavenCentral()
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
    }
}


apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'kotlinx-serialization'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

def kolasuVersion = "develop-SNAPSHOT"

project.group   = "me.tomassetti"
project.version = kolasuVersion

dependencies {
  antlr "org.antlr:antlr4:$antlr_version"
  compile "org.antlr:antlr4-runtime:$antlr_version"
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
  compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
  testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
  testCompile 'junit:junit:4.12'

  compile 'com.fifesoft:rsyntaxtextarea:2.5.8'
  compile 'com.fifesoft:autocomplete:2.5.8'
  compile "org.jetbrains.kotlinx:kotlinx-serialization-json:$serializationVersion"
  compile "org.jetbrains.kotlinx:kotlinx-serialization-cbor:$serializationVersion"

}

task version {
  doLast {
    print "Version ${kolasuVersion}"
  }
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

artifacts {
    archives javadocJar, sourcesJar
  }

test {
  testLogging {
    exceptionFormat = 'full'
  }
}

// specifying what we want to sign
signing {
    sign configurations.archives
}

// deploy
publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'io.github.smeup.jariko'
            artifactId 'kolasu'
            version 'develop-SNAPSHOT'

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'A JAva virtual machine Rpg Interpreter written in KOtlin'
            name 'Jairko'
            url 'https://github.com/smeup/jariko'
            organization {
                name 'com.github.smeup'
                url 'https://github.com/smeup'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/smeup/jariko/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/smeup/jariko/blob/master/LICENSE.md'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/smeup/jariko'
                connection 'scm:git:git://github.com/smeup/jariko.git'
                developerConnection 'scm:git:ssh://git@github.com:smeup/jariko.git'
            }
            developers {
                developer {
                    name 'smeup'
                }
            }
        }
    }
}
