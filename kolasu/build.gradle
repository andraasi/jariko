//-----------------
//kolasu build script
//-----------------
buildscript {

    ext.antlr_version = '4.7.2'

    repositories {
        mavenCentral()
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
    }
}


apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'idea'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    implementation "org.antlr:antlr4:$antlr_version"
    implementation "org.antlr:antlr4-runtime:$antlr_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation 'junit:junit:4.12'

    implementation 'com.fifesoft:rsyntaxtextarea:2.5.8'
    implementation 'com.fifesoft:autocomplete:2.5.8'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serializationVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-cbor:$serializationVersion"

}

task version {
    doLast {
        print "Version ${version}"
    }
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from sourceSets.main.allSource
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

// deploy
publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId jarikoGroupId
            artifactId 'kolasu'
            version jarikoVersion

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
}