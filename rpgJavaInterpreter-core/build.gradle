//-----------------
//interpreter-core build script
//-----------------
buildscript {
    ext.kotlin_version = '1.3.50'
    ext.antlr_version = '4.7.2'

    repositories {
        mavenCentral()
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'antlr'

def antlrVersion = ext.antlr_version
def generatedMain = "generated-src/antlr/main"
def generatedMainFile = file(generatedMain)

dependencies {
    antlr "org.antlr:antlr4:$antlr_version"
    compile "org.antlr:antlr4-runtime:$antlr_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "com.github.ftomassetti:kolasu:a0e7970eae"

    compile "org.apache.logging.log4j:log4j-api-kotlin:1.0.0"
    compile "org.apache.logging.log4j:log4j-api:2.12.1"
    compile "org.apache.logging.log4j:log4j-core:2.12.1"

    compile 'commons-io:commons-io:2.6'
    compile 'com.github.ajalt:clikt:2.1.0'

    compile "com.andreapivetta.kolor:kolor:0.0.2"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile 'junit:junit:4.12'
    testCompile 'org.hsqldb:hsqldb:2.5.0'
    testCompile 'io.mockk:mockk:1.9'
}

configurations.all() {
    resolutionStrategy.force "org.antlr:antlr4-runtime:$antlrVersion"
    resolutionStrategy.force "org.antlr:antlr4-tool:$antlrVersion"
}

generateGrammarSource {
    inputs.files fileTree('src/main/antlr').include('**/*.g4')
    maxHeapSize = "64m"
    arguments += ['-package', 'com.smeup.rpgparser']
    outputDirectory = file(generatedMain + "/com/smeup/rpgparser")
}
compileJava.dependsOn generateGrammarSource
compileJava.source generatedMainFile, sourceSets.main.java
compileKotlin {
    source generatedMainFile, sourceSets.main.java, sourceSets.main.kotlin
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
    dependsOn generateGrammarSource
}

clean {
    delete file(generatedMain)
    mkdir generatedMain
}

idea {
    module {
        println 'Adding ' + generatedMainFile + ' to source dirs'
        mkdir generatedMain
        sourceDirs += generatedMainFile
        println sourceDirs
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "------------------------------------------------------------------------------------"
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                println "------------------------------------------------------------------------------------"
            }
        }
    }
}

//Always reruns all non-performance tests displaying just failing items
task testFailing(type: Test) {
    outputs.upToDateWhen {false}
    testLogging {
        events "failed"
    }
    useJUnit {
        excludeCategories 'com.smeup.rpgparser.PerformanceTest'
    }
}

test {
    testLogging {
        events "failed"
    }
    useJUnit {
        excludeCategories 'com.smeup.rpgparser.PerformanceTest'
    }
}

task testPerformance(type: Test) {
    maxHeapSize = "2048m"
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnit {
        includeCategories 'com.smeup.rpgparser.PerformanceTest'
    }
}

task testAll(type: Test) {
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams true
    }
}

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
    afterEvaluate {
        getClassDirectories().from = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/RpgLexer*',
                              '**/RpgParser*',
                              '**/RpgParser*',
                              '**/RpgParser*'])
        })
    }
}

//gradlew runExample -Pargs="CALCFIB,9"
task runExample (type: JavaExec) {
    if(project.hasProperty('programArgs')){
        args(project.getProperties().get("programArgs").split(','))
    }
    main="com.smeup.rpgparser.execution.RunnerKt"
    classpath = sourceSets.test.runtimeClasspath
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.smeup.rpgparser.execution.RunnerKt'
    }
    archiveBaseName = project.name + '-all'
    archiveVersion = ''
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//Creates smeup-rpg/rpgJavaInterpreter-core/build/libs/rpgJavaInterpreter-core-mute-all.jar
task fatMuteJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.smeup.rpgparser.mute.StandalonemuterunnerKt'
    }
    archiveBaseName = project.name + '-mute-all'
    archiveVersion = ''
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task runMutes(type: JavaExec) {
    dependsOn compileKotlin

    def muteDir = '../mutes_for_ci'
    if (project.hasProperty("muteDir")){
        muteDir = project.getProperties().get("muteDir")
    }
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.smeup.rpgparser.mute.MuterunnerKt'
    args '../mutes_for_ci', "-v", "-lc", "../mutes_for_ci/mute_logging.config"
}

check.dependsOn runMutes
//check.dependsOn jacocoTestReport

